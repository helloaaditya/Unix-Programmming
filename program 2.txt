# Comparison Operators

# Comparison operators are operators that compare values and return true or false. When comparing strings in Bash you can use the following operators:

    # string1 = string2 and string1 == string2 - The equality operator returns true if the operands are equal.
    #    Use the = operator with the test [ command.
    #    Use the == operator with the [[ command for pattern matching.
    # string1 != string2 - The inequality operator returns true if the operands are not equal.
    # string1 > string2 - The greater than operator returns true if the left operand is greater(number of characters) than the right sorted by lexicographical (alphabetical) order.
    # string1 < string2 - The less than operator returns true if the right operand is greater(number of characters) than the right sorted by lexicographical (alphabetical) order.
    # -z string - True if the string length is zero.
    # -n string - True if the string length is non-zero.

# Following are a few points to be noted when comparing strings:

    # A blank space must be used between the binary operator and the operands.
    # Always use double quotes around the variable names to avoid any word splitting or globbing issues.
    # Bash does not segregate variables by “type”, variables are treated as integer or string depending on the context.

# Program 2: Write a shell script to compare two strings.

read -p "Enter first string: " var1
read -p "Enter second string: " var2

# [[ "$var1" == "$var2" ]] && echo "$var1 and $var2 Strings are equal." || echo "$var1 and $var2 Strings are not equal."

if [ "$var1" == "$var2" ]
then
    echo "$var1 and $var2 Strings are equal."
    exit
else
    echo "$var1 and $var2 Strings are not equal."
fi


if [[ "$var1" > "$var2" ]]	#We can also use the less than < and greater than > operators to check if one string has more characters than the other.
then
    echo "$var1 String has more characters than $var2."
else
    echo "$var2 String has more characters than $var1."
fi


string="unix"

if [[ -n $string ]]; 		# The -n operator can also be used to test if the string length is NOT zero. 
then
    echo "The string is not empty."
else
    echo "The string is empty."
fi


string=""

if [[ -z $string ]]; 		# Another operator we can use with strings is -z, which allows us to test if the string length is 0. 
then
	echo "The string is empty."
else
	echo "The string is not empty."
fi